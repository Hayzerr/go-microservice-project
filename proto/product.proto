syntax = "proto3";

package product; // Или ваш package name, например, pb

// ВАЖНО: Замените 'your_project_module_path/pb' на ваш актуальный путь к модулю pb
// Например: "github.com/Hayzerr/go-microservice-project/pb"
option go_package = "your_project_module_path/pb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto"; // Для опциональных полей
import "google/protobuf/empty.proto";    // Для ответов без данных, например, при удалении

// Тип продукта (копируем из Go модели для консистентности)
enum ProductTypeProto {
  PRODUCT_TYPE_PROTO_UNSPECIFIED = 0; // Значение по умолчанию
  TICKET = 1;
  MERCHANDISE = 2;
  // Добавьте другие типы, если необходимо
}

message Product {
  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4; // Используем double для цены, соответствует float64 в Go
  ProductTypeProto type = 5;
  int32 stock = 6; // Используем int32 для количества, соответствует int в Go
  string festival_id = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// --- Запросы и ответы для CRUD операций ---

// CreateProduct
message CreateProductRequest {
  string name = 1;
  string description = 2;
  double price = 3;
  ProductTypeProto type = 4;
  int32 stock = 5;
  string festival_id = 6; // Может быть опциональным
}

message CreateProductResponse {
  Product product = 1;
}

// GetProductByID
message GetProductRequest {
  string id = 1;
}

message GetProductResponse {
  Product product = 1;
}

// ListProducts
message ListProductsRequest {
  // Можно добавить параметры для фильтрации или пагинации, например:
  // string festival_id_filter = 1;
  // ProductTypeProto type_filter = 2;
  // int32 page_size = 3;
  // string page_token = 4;
}

message ListProductsResponse {
  repeated Product products = 1;
  // string next_page_token = 2; // Для пагинации
}

// UpdateProduct
message UpdateProductRequest {
  string id = 1; // ID продукта для обновления
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.DoubleValue price = 4;
  ProductTypeProto type = 5; // Если тип можно менять, иначе можно убрать или сделать оберткой
  google.protobuf.Int32Value stock = 6;
  google.protobuf.StringValue festival_id = 7;
}

message UpdateProductResponse {
  Product product = 1;
}

// DeleteProduct
message DeleteProductRequest {
  string id = 1;
}

// DeleteProductResponse может быть пустым, если при удалении ничего не возвращается
// Используем google.protobuf.Empty
// message DeleteProductResponse {}

// Сервис для управления продуктами
service ProductService {
  rpc CreateProduct (CreateProductRequest) returns (CreateProductResponse);
  rpc GetProduct (GetProductRequest) returns (GetProductResponse); // Изменено с GetProductByID для краткости
  rpc ListProducts (ListProductsRequest) returns (ListProductsResponse);
  rpc UpdateProduct (UpdateProductRequest) returns (UpdateProductResponse);
  rpc DeleteProduct (DeleteProductRequest) returns (google.protobuf.Empty); // Возвращает пустое сообщение
}
